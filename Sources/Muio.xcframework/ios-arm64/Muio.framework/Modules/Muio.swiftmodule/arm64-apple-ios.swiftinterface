// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Muio
import CoreMedia
import MetalKit
import MobileCoreServices
import SceneKit
import Swift
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class MetalDevice {
  public static let shared: Muio.MetalDevice
  final public let device: any Metal.MTLDevice
  final public let commandQueue: any Metal.MTLCommandQueue
  public var videoTextureCache: CoreVideo.CVMetalTextureCache?
  @objc deinit
  final public func allocTextureCache()
  final public func newCommandBuffer() -> any Metal.MTLCommandBuffer
  final public class func renderPipe(vertexFunctionName: Swift.String = "vertexShader", fragmentFunctionName: Swift.String, pixelFormat: Metal.MTLPixelFormat) throws -> any Metal.MTLRenderPipelineState
  final public class func texture(_ size: CoreFoundation.CGSize, pixelFormat: Metal.MTLPixelFormat = .bgra8Unorm, _ label: Swift.String = "") -> (any Metal.MTLTexture)?
  final public class func textureRead(_ size: CoreFoundation.CGSize, pixelFormat: Metal.MTLPixelFormat = .bgra8Unorm) -> (any Metal.MTLTexture)?
  final public class func textureA(_ width: Swift.Int, _ height: Swift.Int) -> (any Metal.MTLTexture)?
  final public class func filerTexture(_ width: Swift.Int, _ height: Swift.Int) -> (any Metal.MTLTexture)?
  final public class func vertexBuffer() -> (any Metal.MTLBuffer)?
  final public class func faceBuffer(faceFloats: [simd.float2]) -> (any Metal.MTLBuffer)?
  final public let index_data: [Swift.UInt16]
  final public func renderPipe(vertexFunctionName: Swift.String = "vertexShader", fragmentFunctionName: Swift.String, pixelFormat: Metal.MTLPixelFormat) throws -> any Metal.MTLRenderPipelineState
  final public class func faceIndexBuffer(faceFloats: [simd.float2]) -> (any Metal.MTLBuffer)?
  final public func cVTexture(buffer: CoreVideo.CVPixelBuffer?) -> (any Metal.MTLTexture)?
  final public func ciTexture(_ img: CoreImage.CIImage?, size: CoreFoundation.CGSize, pixelFormat: Metal.MTLPixelFormat = .bgra8Unorm) -> (any Metal.MTLTexture)?
  final public func ciTextures(_ imgs: [CoreImage.CIImage], size: CoreFoundation.CGSize, commandBuff: any Metal.MTLCommandBuffer) -> (any Metal.MTLTexture)?
  final public class func scnTexture(_ size: CoreFoundation.CGSize) -> any Metal.MTLTexture
  final public class func sceneToTexture(in scnView: SceneKit.SCNView, _ commandBuffer: any Metal.MTLCommandBuffer, texture: inout any Metal.MTLTexture, time: CoreFoundation.CFTimeInterval)
  final public func computeState(compStr: Swift.String) -> (any Metal.MTLComputePipelineState)!
  final public func dstTexture(buffer: CoreVideo.CVPixelBuffer!) -> (any Metal.MTLTexture)?
  public static func allocateBufferPool(with inputFormatDescription: CoreMedia.CMFormatDescription, outputRetainedBufferCountHint: Swift.Int) -> (outputBufferPool: CoreVideo.CVPixelBufferPool?, outputColorSpace: CoreGraphics.CGColorSpace?, outputFormatDescription: CoreMedia.CMFormatDescription?)
  public static func preallocateBuffers(pool: CoreVideo.CVPixelBufferPool, allocationThreshold: Swift.Int)
  public static func jpegDataFromCIImage(from renderedCIImage: CoreImage.CIImage, attachments: CoreFoundation.CFDictionary?) -> Foundation.Data?
  public static func jpegDataFromCGImage(from renderedCGImage: CoreGraphics.CGImage, attachments: CoreFoundation.CFDictionary?) -> Foundation.Data?
  public static func saveCIImageToCameraRoll(image: CoreImage.CIImage, _ comp: @escaping () -> Swift.Void)
  public static func jpegData(withPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer, attachments: CoreFoundation.CFDictionary?) -> Foundation.Data?
  public static func cgImage(from texture: any Metal.MTLTexture) throws -> CoreGraphics.CGImage?
}
extension Swift.SIMD2 where Scalar == Swift.Float {
  public func convertCoord() -> simd.float2
}
extension Metal.MTLRenderCommandEncoder {
  public func setFragmentTextures(_ textures: [(any Metal.MTLTexture)?], startingAt startIndex: Swift.Int = 0)
}
